using moovpad.Shared;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.AspNetCore.Mvc;
using System;
 
//CRUD Operations - Linking DB and Table
namespace moovpad.Server.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class u001_000_001Controller
    {
        private readonly us001DbContext db;
 
        public string ID; //this assumed the ID will be passed into this handler by the calling object/page
 
        public u001_000_001Controller(us001DbContext db)
        {
            this.db = db;
        }
 
        [HttpPut("id")]
        public async Task<u001_000_001> Put(Guid id, [FromBody] u001_000_001 user)
        {
            var edit = await db.u001_000_001.FindAsync(id);
            if (edit != null)
            {
                edit.uID = user.uID;
                edit.uPwd = user.uPwd;
                edit.uName = user.uName;
                edit.uEmail = user.uEmail;
                edit.uPin = user.uPin;
                edit.uType = user.uType;
                edit.uProf = user.uProf;
                edit.uTribe = user.uTribe;
                edit.uFollow = user.uFollow;
                edit.uPrefs = user.uPrefs;
                edit.uTProg = user.uTProg;
                await db.SaveChangesAsync();
            }
            return edit;
        }
 
        [HttpDelete("id")]
        public async Task<u001_000_001> Delete(string id)
        {
            var delete = await db.u001_000_001.FindAsync(id);
            if (delete != null)
            {
                db.u001_000_001.Remove(delete);
                await db.SaveChangesAsync();
            }
            return delete;
        }
 
        [HttpPost]
        public async Task<u001_000_001> Post([FromBody] u001_000_001 create)
        {
            //create.uID = ID;
            EntityEntry<u001_000_001> user = await db.u001_000_001.AddAsync(create);
            await db.SaveChangesAsync();
            return user.Entity;
        }
 
        [HttpGet]
        public async Task<IEnumerable<u001_000_001>> Get(string name)
        {
            return await Task.Factory.StartNew<IEnumerable<u001_000_001>>(() =>
            {
                if (string.IsNullOrEmpty(name))
                    return db.u001_000_001;
                else
                    return db.u001_000_001.Where(x => x.uName.Contains(name));
            });
 
        }
 
        [HttpGet("id")]
        public async Task<u001_000_001> Get(Guid id)
        {
            return await db.u001_000_001.FindAsync(id);
        }
    }
}
